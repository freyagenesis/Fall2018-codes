trainErrVector = c(trainErrVector, KNN_train_err)
}
print(testErrVector)
par(mfrow=c(1,2))
plot(trainErrVector, type = 'l', col="red")
plot(testErrVector, type = 'l', col="Green")
}
for (i in 1:13) {
trainErrVector <- c()
testErrVector <- c()
for (knn_VAL in c(1,5,10,20,30,50)) {
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
#Test Pred
Data_Boston_test_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_test_err <- mean(Data_Boston_test_mod != crim_Tru_test)
#Training Pred
Data_Boston_train_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_train_err <- mean(Data_Boston_train_mod != crim_Tru_train)
testErrVector = c(testErrVector, KNN_test_err)
trainErrVector = c(trainErrVector, KNN_train_err)
}
print(i)
print(testErrVector)
par(mfrow=c(1,2))
plot(trainErrVector, type = 'l', col="red")
plot(testErrVector, type = 'l', col="Green")
}
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
}
}
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.train))
names(conf)
conf$table
}
}
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.train))
names(conf)
conf$table
}
}
crim_Tru_test
pred.test
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
}
}
par(mfrow=c(1,2))
plot(LR_train_err.store, type = 'l', col="red", xlab =
"Number of subsets", ylab = "Training Error")
title("Logisitic regression")
plot(LR_test_err.store, type = 'l', col="Green", xlab =
"Number of subsets", ylab = "Test Error")
set.seed(1234)
train_Index <- sample(1:nrow(Data_Boston), .66*nrow(Data_Boston))
Data_Boston_train <- Data_Boston[train_Index,]
Data_Boston_test <- Data_Boston[-train_Index,]
#Numerical response data
crim_Tru_train <- as.numeric(Data_Boston_train$crim)
crim_Tru_test <- as.numeric(Data_Boston_test$crim)
#Error holder
modelName = c()
testErrVector = c()
trainErrVector = c()
###############################
#Best subset selection
###############################
regfit.full <- regsubsets(Data_Boston_train$crim~., data = Data_Boston_train,
nbest = 1, nvmax = 14, method = "exhaustive")
best_sum <- summary(regfit.full)
true_train<-Data_Boston_train$crim
# Best subset
which(best_sum$cp == min(best_sum$cp))
LR_train_err<-NULL
LR_test_err<-NULL
LR_train_err.store <- c()
LR_test_err.store <- c()
fit <- regsubsets(crim~., data = Data_Boston_train, method =
"exhaustive", nvmax = 13)
my_summary <- summary(fit)
names(my_summary)
my_summary$cp
my_summary$bic
which.min(my_summary$cp)
which.min(my_summary$bic)
select = summary(fit)$outmat
train.error.store <- c()
test.error.store <- c()
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
}
}
par(mfrow=c(1,2))
plot(LR_train_err.store, type = 'l', col="red", xlab =
"Number of subsets", ylab = "Training Error")
title("Logisitic regression")
plot(LR_test_err.store, type = 'l', col="Green", xlab =
"Number of subsets", ylab = "Test Error")
#Min train error
min(LR_train_err.store)
#Min test error
min(LR_test_err.store)
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
#if (i == 5){
# conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
# names(conf)
# conf$table
}
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
#if (i == 5){
# conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
# names(conf)
# conf$table
#}
}
par(mfrow=c(1,2))
plot(LR_train_err.store, type = 'l', col="red", xlab =
"Number of subsets", ylab = "Training Error")
title("Logisitic regression")
plot(LR_test_err.store, type = 'l', col="Green", xlab =
"Number of subsets", ylab = "Test Error")
#Min train error
min(LR_train_err.store)
#Min test error
min(LR_test_err.store)
#Confusion Matrix
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
rm(list = ls())
#install.packages("caret")
library(ISLR)
library(leaps)
library(MASS)
library(glmnet)
library(klaR)
library(caret)
require(class)
#Load Boston Data
Data_Boston = Boston
#Median of crime rate
CrimeRate_Median = median(Data_Boston$crim)
Data_Boston$crim = ifelse(Data_Boston$crim > CrimeRate_Median,0,1)
set.seed(1234)
train_Index <- sample(1:nrow(Data_Boston), .66*nrow(Data_Boston))
Data_Boston_train <- Data_Boston[train_Index,]
Data_Boston_test <- Data_Boston[-train_Index,]
#Numerical response data
crim_Tru_train <- as.numeric(Data_Boston_train$crim)
crim_Tru_test <- as.numeric(Data_Boston_test$crim)
#Error holder
modelName = c()
testErrVector = c()
trainErrVector = c()
###############################
#Best subset selection
###############################
regfit.full <- regsubsets(Data_Boston_train$crim~., data = Data_Boston_train,
nbest = 1, nvmax = 14, method = "exhaustive")
best_sum <- summary(regfit.full)
true_train<-Data_Boston_train$crim
# Best subset
which(best_sum$cp == min(best_sum$cp))
LR_train_err<-NULL
LR_test_err<-NULL
LR_train_err.store <- c()
LR_test_err.store <- c()
fit <- regsubsets(crim~., data = Data_Boston_train, method =
"exhaustive", nvmax = 13)
my_summary <- summary(fit)
names(my_summary)
my_summary$cp
my_summary$bic
which.min(my_summary$cp)
which.min(my_summary$bic)
select = summary(fit)$outmat
train.error.store <- c()
test.error.store <- c()
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
#if (i == 5){
# conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
# names(conf)
# conf$table
#}
}
par(mfrow=c(1,2))
plot(LR_train_err.store, type = 'l', col="red", xlab =
"Number of subsets", ylab = "Training Error")
title("Logisitic regression")
plot(LR_test_err.store, type = 'l', col="Green", xlab =
"Number of subsets", ylab = "Test Error")
#Min train error
min(LR_train_err.store)
#Min test error
min(LR_test_err.store)
#Confusion Matrix
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
pred.test
crim_Tru_test
round(pred.test)
rm(list = ls())
#install.packages("caret")
library(ISLR)
library(leaps)
library(MASS)
library(glmnet)
library(klaR)
library(caret)
require(class)
#Load Boston Data
Data_Boston = Boston
#Median of crime rate
CrimeRate_Median = median(Data_Boston$crim)
Data_Boston$crim = ifelse(Data_Boston$crim > CrimeRate_Median,0,1)
set.seed(1234)
train_Index <- sample(1:nrow(Data_Boston), .66*nrow(Data_Boston))
Data_Boston_train <- Data_Boston[train_Index,]
Data_Boston_test <- Data_Boston[-train_Index,]
#Numerical response data
crim_Tru_train <- as.numeric(Data_Boston_train$crim)
crim_Tru_test <- as.numeric(Data_Boston_test$crim)
#Error holder
modelName = c()
testErrVector = c()
trainErrVector = c()
###############################
#Best subset selection
###############################
regfit.full <- regsubsets(Data_Boston_train$crim~., data = Data_Boston_train,
nbest = 1, nvmax = 14, method = "exhaustive")
best_sum <- summary(regfit.full)
true_train<-Data_Boston_train$crim
# Best subset
which(best_sum$cp == min(best_sum$cp))
LR_train_err<-NULL
LR_test_err<-NULL
LR_train_err.store <- c()
LR_test_err.store <- c()
fit <- regsubsets(crim~., data = Data_Boston_train, method =
"exhaustive", nvmax = 13)
my_summary <- summary(fit)
names(my_summary)
my_summary$cp
my_summary$bic
which.min(my_summary$cp)
which.min(my_summary$bic)
select = summary(fit)$outmat
train.error.store <- c()
test.error.store <- c()
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
pred.test <- round(pred.test)
pred.train <- round(pred.train)
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
}
}
par(mfrow=c(1,2))
plot(LR_train_err.store, type = 'l', col="red", xlab =
"Number of subsets", ylab = "Training Error")
title("Logisitic regression")
plot(LR_test_err.store, type = 'l', col="Green", xlab =
"Number of subsets", ylab = "Test Error")
#Min train error
min(LR_train_err.store)
#Min test error
min(LR_test_err.store)
#Confusion Matrix
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
pred.test <- round(pred.test)
pred.train <- round(pred.train)
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
conf$table
}
}
for (i in 1:13){
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
red.fit <- glm(crim~., data = red.training)
pred.train = predict(red.fit, newdata = red.training, type='response')
pred.test = predict(red.fit, newdata = red.testing, type='response')
pred.test <- round(pred.test)
pred.train <- round(pred.train)
test.error <- (1/length(crim_Tru_test))*sum((pred.test - crim_Tru_test)^2)
train.error <- (1/length(crim_Tru_train))*sum((pred.train - crim_Tru_train)^2)
LR_train_err.store <- c(LR_train_err.store, train.error)
LR_test_err.store <- c(LR_test_err.store, test.error)
#Confusion Matrix for best subset predictors = 5
if (i == 5){
conf <- confusionMatrix(as.factor(crim_Tru_test), as.factor(pred.test))
names(conf)
print(conf$table)
}
}
for (i in 1:13) {
trainErrVector <- c()
testErrVector <- c()
for (knn_VAL in c(1,5,10,20,30,50)) {
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
#Test Pred
Data_Boston_test_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_test_err <- mean(Data_Boston_test_mod != crim_Tru_test)
#Training Pred
Data_Boston_train_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_train_err <- mean(Data_Boston_train_mod != crim_Tru_train)
testErrVector = c(testErrVector, KNN_test_err)
trainErrVector = c(trainErrVector, KNN_train_err)
}
print(i)
print(testErrVector)
par(mfrow=c(1,2))
plot(trainErrVector, type = 'l', col="red")
plot(testErrVector, type = 'l', col="Green")
}
###############################
#Best subset selection
###############################
regfit.full <- regsubsets(Data_Boston_train$crim~., data = Data_Boston_train,
nbest = 1, nvmax = 14, method = "exhaustive")
best_sum <- summary(regfit.full)
best_sum
for (i in 1:13) {
trainErrVector <- c()
testErrVector <- c()
for (knn_VAL in c(1,5,10,20,30,50)) {
temp <- which(select[i,] == "*")
temp <- temp + 1
temp
red.training <- Data_Boston_train[, c(1,temp)]
red.testing <- Data_Boston_test[,c(1,temp)]
#Test Pred
Data_Boston_test_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_test_err <- mean(Data_Boston_test_mod != crim_Tru_test)
#Training Pred
Data_Boston_train_mod = knn(red.training, red.testing,
red.training$crim, knn_VAL)
KNN_train_err <- mean(Data_Boston_train_mod != crim_Tru_train)
testErrVector = c(testErrVector, KNN_test_err)
trainErrVector = c(trainErrVector, KNN_train_err)
}
print(i)
print(testErrVector)
par(mfrow=c(1,2))
plot(trainErrVector, type = 'l', col="red")
plot(testErrVector, type = 'l', col="Green")
}
