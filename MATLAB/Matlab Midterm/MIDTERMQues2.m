%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Problem 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%(a)
A = [1/3 1/3  2/3; 2/3 2/3 4/3; 1/3 2/3 3/3; 2/5 2/5 4/5; 3/5 1/5 4/5]

%(i)
rank(A)
%The rank is 2 as the matrix A has 3 columns but the third column is
%dependant on the other two columns. Hence the number of pivot columns is 2
%and hence the rank is 2.

%(ii)
[U,S,V] = svd(A)
diag(S)
%To Justify - The diagonal matrix S has only 2 singular values and hence
%the rank is 2.     

%(iii)
B = zeros(2000)
%Assigning singular values across the diagonal elements of n powers of
%(0.9)
for i = 1:2000
    B(i,i)= (0.9)^i;
end
rank(B)
rank(B, eps)


%(iv)
format long
diagonal_elements = B;
diag(diagonal_elements)


%(b)
%From Problem 1
x = [1.02 0.95 0.87 0.77 0.67 0.56 0.44 0.3 0.16 0.01]
y = [0.39 0.32 0.27 0.22 0.18 0.15 0.13 0.12 0.13 0.15]

X = [transpose(y.*y) transpose(x.*y) transpose(x) transpose(y) transpose(ones(size(x)))]
%To find the coefficient values 
B = X\transpose(x.*x)

%(i)
R = [-0.005 0.005]

for i = 1:5
    %N random numbers generated in the interval (a,b) using the formula
    %for the interval [-0.005,0.005]
    %randomn_1 = (rand(length(x),1)*(0.010))+min(R)
    %randomn_2 = (rand(length(x),1)*(0.010))+min(R)
    randomn_1 = -0.005 + (0.005+0.005).*rand(length(x),1)
    randomn_2 = -0.005 + (0.005+0.005).*rand(length(x),1)
    
    %On adding the noise
    x_val = x + randomn_1'
    y_val = y + randomn_2'

    X_val = [transpose(y_val.*y_val) transpose(x_val.*y_val) transpose(x_val) transpose(y_val) transpose(ones(size(x_val)))]

    B_val = X_val\(x_val.*x_val)'
    %figure()
    scatter(x_val,y_val)
    hold on

    scatter(x,y)

    ezplot(strrep(strcat('x^2  =',num2str(B(1)),'*y^2+',num2str(B(2)),'*x*y+', num2str(B(3)),'*x+',num2str(B(4)),'*y+',num2str(B(5))),'+-','-'))
    ezplot(strrep(strcat('x_val^2  =',num2str(B_val(1)),'*y_val^2+',num2str(B_val(2)), '*x_val*y_val+',num2str(B_val(3)),'*x_val+',num2str(B_val(4)),'*y_val+',num2str(B_val(5))),'+-','-'))
end
%Inference - It is observed that the values generated by the noise didnt
%differ much in value and hence were plotted as the same ellipse.

%(ii)
%SVD values of the orginal matrix
[u,s,v] = svd(X)
%SVD values of the noisy matrix
[u1,s1,v1] = svd(X_val)

%Setting the k value
for k = [0.1,0.01,0.001,0.0001,0.00001]
% SVD with tolerance
orig_x  = u(:,1:rank(s,k)) * s(1:rank(s,k),1:rank(s,k)) * v(:,1:rank(s,k))'
nois_x = u1(:,1:rank(s1,k)) * s1(1:rank(s1,k),1:rank(s,k)) * v1(:,1:rank(s1,k))'

orig_B = orig_x\(x.*x)'
nois_B = nois_x\(x_val.*x_val)'

figure()
scatter(x,y)
hold on

%Normal Graph
ezplot(strrep(strcat('x^2  =',num2str(B(1)),'*y^2+',num2str(B(2)),'*x*y+', num2str(B(3)),'*x+',num2str(B(4)),'*y+',num2str(B(5))),'+-','-'))
    
%Normal with the tolerance Grpah
ezplot(strrep(strcat('x_val^2  =',num2str(orig_B(1)),'*y_val^2+',num2str(orig_B(2)),'*x_val*y_val+',num2str(orig_B(3)),'*x_val+',num2str(orig_B(4)),'*y_val+',num2str(orig_B(5))),'+-','-'))

%Normal with noise and tolerance Graph
ezplot(strrep(strcat('x_val^2  =',num2str(nois_B(1)),'*y_val^2+',num2str(nois_B(2)),'*x_val*y_val+',num2str(nois_B(3)),'*x_val+',num2str(nois_B(4)),'*y_val+',num2str(nois_B(5))),'+-','-'))
hold off
end
